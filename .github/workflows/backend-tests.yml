name: Backend Tests (Linux)

on:
  push:
    branches: [develop]
    paths: ['backend/**']
  pull_request:
    branches: [develop]
    paths: ['backend/**']

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: taskmanager_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            backend/
            !**/node_modules/
          sparse-checkout-cone-mode: false
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./backend

      - name: Create Temporary `.env` File for Tests
        run: |
          echo "PORT=5000" > backend/.env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/taskmanager_test" >> backend/.env.test
          echo "JWT_SECRET=your_jwt_secret" >> backend/.env.test
          echo "GOOGLE_CLIENT_ID=your_client_id.apps.googleusercontent.com" >> backend/.env.test
          echo "GOOGLE_CLIENT_SECRET=your_client_secret" >> backend/.env.test
          echo "GOOGLE_CALLBACK_URL=http://localhost:5000/api/auth/google/callback" >> backend/.env.test
          echo "FRONTEND_URL=http://localhost:3000" >> backend/.env.test

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready"
              exit 0
            fi
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL did not become ready in time" && exit 1
        shell: bash

      - name: Generate Prisma client
        run: npx prisma generate
        working-directory: ./backend

      - name: Apply database migrations
        run: npx prisma migrate deploy
        working-directory: ./backend
        env:
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/taskmanager_test'
      - name: Seed test database
        run: node prisma/seed.js
        working-directory: ./backend
        env:
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/taskmanager_test'
      - name: Run Tests
        run: npm test
        working-directory: ./backend
        env:
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/taskmanager_test'
          CI: true
