generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  provider  String  @default("credentials") // "credentials" or "google"
  googleId  String?  @unique
  tasks     Task[]    
  auth      UserAuth? @relation(fields: [authId], references: [id])
  authId    Int?      @unique  
  createdAt DateTime @default(now())  
}


model UserAuth {
  id       Int     @id @default(autoincrement())
  user     User?
  password String?   // Nullable for OAuth users
  salt     String?
  resetToken String? // For password reset flows
  resetTokenExpiry DateTime?
}


model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus @default(IN_COURSE)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dueDate     DateTime? // Optional due date
  priority    Priority  @default(MEDIUM) // New priority field
  deletedAt   DateTime? // New field for soft delete
  isDeleted   Boolean  @default(false) // New field for easy filtering
  
  @@unique([id, userId], name: "id_userId") // Add this compound unique constraint
}

enum TaskStatus {
  IN_COURSE
  FINISHED
  STOPPED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}